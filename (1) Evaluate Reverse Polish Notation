// 150. Evaluate Reverse Polish Notation
// Medium

// Evaluate the value of an arithmetic expression in Reverse Polish Notation.

// Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

// Note that division between two integers should truncate toward zero.

// It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.

//  

// Example 1:

// Input: tokens = ["2","1","+","3","*"]
// Output: 9
// Explanation: ((2 + 1) * 3) = 9

// Example 2:

// Input: tokens = ["4","13","5","/","+"]
// Output: 6
// Explanation: (4 + (13 / 5)) = 6

// Example 3:

// Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
// Output: 22
// Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
// = ((10 * (6 / (12 * -11))) + 17) + 5
// = ((10 * (6 / -132)) + 17) + 5
// = ((10 * 0) + 17) + 5
// = (0 + 17) + 5
// = 17 + 5
// = 22

//  

// Constraints:

//     1 <= tokens.length <= 104
//     tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200]
#include<bits/stdc++.h>
using namespace std;
 int solve(long long  a,long long  b,string notation)
{
        if(notation=="+")
        {
            return (b+a);//b-a because stack me dalne pe ulta ho ja rha hai so 
        }
        if(notation=="-")
        {
            return (b-a);
        }
        if(notation=="*")
        {
            return (a*b);
        }
        return (b/a);
}
int evalRPN(vector<string>value)
{
    // stack<long long>s;
    // for(auto val:value)
    // {
    //     if(val=="+"||val=="*"||val=="-"||val=="/")
    //     {
    //         long long a=s.top();
    //         s.pop();
    //         long long b=s.top();
    //         s.pop();
    //        long long  topush=solve(a,b,val);
    //         s.push(topush);
    //     }
    //     else
    //     {
    //           //agar digit ho to ise integer me typecast kar do or stack me store kar do 
    //            s.push(stoi(val));
    //     }
    // }
    // return s.top();
    stack<string >s;
    for(auto x:value)
    {
        if(x=="+"||x=="*"||x=="-"||x=="-")
        {
            int a=stoi(s.top());
            s.pop();
            int  b=stoi(s.top());
            s.pop();
            if(x=="+")
            {
                s.push(to_string(b+a));
            }
             else if(x=="-")
            {
                s.push(to_string(b-a));
            }
           else if(x=="*")
            {
                s.push(to_string(b*a));
            }
            else
            {
                s.push(to_string(b/a));
            }
        }  
        else
        {
            s.push(x);
        }
    }
    return stoi(s.top());

}
int main()
{
    vector<string>v;
    v.push_back("2");
    v.push_back("1");
    v.push_back("+");
    v.push_back("3");
    v.push_back("*");
    cout<<evalRPN(v)<<endl;
    return 0;
}
